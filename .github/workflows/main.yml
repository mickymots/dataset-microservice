# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains 2 jobs called "build" and "setup-gcloud-sdk"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      
      # Setup Docker Builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # Login to Github container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create Docker META
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ github.repository }}/dataset-microservice-image # list of Docker images to use as base name for tags
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}            
          tag-sha: true # add git short SHA as Docker tag
          
      # Build and Push Docker Image
      - name: Build and Push container image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
#           push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
  
      #Publish Docker image details
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

    outputs:
      image-names: ${{ steps.docker_meta.outputs.tags }}
      image-version: ${{ steps.docker_meta.outputs.version }}
  
  deploy-to-gke:
    environment: dev
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - id: echo_image_version
        name: Echo image version
        run: echo ${{needs.build.outputs.image-version}}
      
      - id: echo_image_name 
        name: Echo image name
        run: echo ${{needs.build.outputs.image-tag}}
      
      - id: echo_image_sha
        name: Echo image name
        run: echo ${{env.GITHUB_SHA}}
      
#         - name: Set up Cloud SDK
#           uses: google-github-actions/setup-gcloud@master
#           with:
#             project_id: ${{ secrets.GCP_PROJECT_ID }}
#             service_account_key: ${{ secrets.GCP_SA_KEY }}
#             export_default_credentials: true    
      
#         - id: get-credentials
#           uses: google-github-actions/get-gke-credentials@main
#           with:
#             cluster_name: dataset-cluster
#             location: us-central1-c
            
          
#         - name: deploy to dev cluster
#           run : kubectl create deployment hello-app --image=docker.pkg.github.com/mickymots/dataset-microservice/dataset-microservice-image:sha-3731d82

#         - name: expose service
#           run : kubectl expose deployment hello-app --type=LoadBalancer --port 8080
    
